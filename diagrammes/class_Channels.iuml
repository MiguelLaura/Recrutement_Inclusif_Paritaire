@startuml Diagramme de classes centré sur la communication

'-----------------
' Parametrage

title Diagramme de classes centré sur la communication

'-----------------
' Classes

class Entreprise {
    # sync.Mutex
	# employes : []*Employe
	# plaintes : []][]*Employe
	# nbActions : int
	# nbAgresseurs : int
	# fin : bool
	# chnl : chan Communicateur
	# chnlRecrutement : chan CommunicateurRecrutement
	# chnlNotifAction : chan Communicateur

    + GestionRecrutements() 
    + GestionPlaintes()
    + RecevoirPlainte(plaignant *Employe, accuse *Employe)
    + EnvoyerEmploye() : *Employe
}

class Recrutement {
	# fin : bool
    # chnl : chan CommunicateurRecrutement
}

class Employe {
	# id : int
	# santeMentale : int = 100 {>= 0 && <= 100}
	# agresseur : bool
	# fin : bool
    # chnl : chan Communicateur

    + Start()
    + EtreAgresse(*Employe)
    + Agresser()
    + PorterPlainte(*Employe)
    + GagnerAnciennete()
}

interface Logger {
    + Log(msg any...)
    + Err(msg any...)
}

class Loggers {
    + AjouterLogger(Logger)
    + Log(msg any...)
    + Err(msg any...)
}

class Simulation {
	# step : int
	# maxStep : int
	# status : Status
	+ Start()
	+ Pause()
	+ EnvoyerInfosInitiales()
	+ obtenirSituationActuelle()
	- startAgents()
}


'-----------------
' Enumerations

enum Action {
	LIBRE
	AGRESSION
	FIN
}

enum ActionRecrutement {
	RECRUTEMENT
	FIN_RECRUTEMENT
	FIN_AGENT
}

enum Status {
	CREATED
	STARTED
	PAUSED
	ENDED
	STEP
}

struct Communicateur {
	# Act : Action
    # Payload : any
}

struct CommunicateurRecrutement {
	# Act : ActionRecrutement
    # Payload : any
}

'-----------------
' Relations

Entreprise "1" o-- "*" Employe : # employes []*Employe
Entreprise "1" o-- "1" Recrutement : # recrutement

Simulation *-- "1" Entreprise : # entreprise

Entreprise o-- "1" Loggers : # logger *Loggers
Employe o-- "1" Loggers : # logger *Loggers
Recrutement o-- "1" Loggers : # logger *Loggers
Simulation *-- "1" Loggers : # logger

Loggers --> "*" Logger : # lesLoggers []Logger

Logger .. ConsoleLogger : <<implements>>
Logger .. SocketLogger : <<implements>>
Logger .. FileLogger : <<implements>>
@enduml


' // ------------ SIMULATION ------------

' type SimulationLocker struct {
' 	sync.WaitGroup
' 	sync.Mutex
' }

' type Simulation struct {
' 	ent            Entreprise
' 	pariteInit     float64
' 	nbEmployesInit int
' 	maxStep        int
' 	step           int // Stats
' 	start          time.Time
' 	status         Status // created, started, pause, finished
' 	logger         logger.Loggers
' 	locker         SimulationLocker
' 	agentsLances   bool
' }
